<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
	
	
	<aop:aspectj-autoproxy/>
	
	<bean id="beanManager" class="com.m4f.utils.beans.BeanManager"/>
	
	<!-- MultiLanguage DAO -->
	<bean id="i18nDAO" class="com.m4f.utils.i18n.dao.impl.jdo.JdoI18nDAO"/>
	
	
	<!-- SEO catalog Helper Bean  -->
	<bean id="seoCatalogBuilder" class="com.m4f.utils.seo.impl.HirubilaSeoCatalogBuilder"/>
	
	<!-- Mulilanguage services definitions. -->
	
	<bean id="mediatorService" class="com.m4f.business.service.impl.MediationServiceImpl" scope="prototype">
		<constructor-arg index="0" ref="i18nDAO"/>
	</bean>
	
	<bean id="inboxService" class="com.m4f.business.service.impl.InboxServiceImpl" scope="prototype">
		<constructor-arg index="0" ref="i18nDAO"/>
	</bean>
	
	<bean id="courseService" class="com.m4f.business.service.impl.CourseServiceImpl" scope="prototype">
		<constructor-arg index="0" ref="i18nDAO"/>
	</bean>
	
	<bean id="extendedCourseService" class="com.m4f.business.service.extended.impl.ExtendedCourseServiceImpl" scope="prototype">
		<constructor-arg index="0" ref="i18nDAO"/>
	</bean>
		
	
	<bean id="schoolService" class="com.m4f.business.service.impl.SchoolServiceImpl" scope="prototype">
		<constructor-arg index="0" ref="i18nDAO"/>
		<constructor-arg index="1" ref="courseService"/>
	</bean>
	
	<bean id="extendedSchoolService" class="com.m4f.business.service.extended.impl.ExtendedSchoolServiceImpl" scope="prototype">
		<constructor-arg index="0" ref="i18nDAO"/>
		<constructor-arg index="1" ref="extendedCourseService"/>
		<constructor-arg index="2" ref="territorialService"/>
	</bean>
	
	<bean id="providerService" class="com.m4f.business.service.impl.ProviderServiceImpl" scope="prototype">
		<constructor-arg index="0" ref="i18nDAO"/>
	</bean>
	
	<bean id="territorialService" class="com.m4f.business.service.impl.TerritorialService" scope="prototype">
		<constructor-arg index="0" ref="i18nDAO"/>
	</bean>
	
	<!-- NO multi-language DAO -->
	<bean id="jdoDAO" class="com.m4f.utils.dao.impl.JdoDAO"/>
	
	<!-- NO multilanguage services definitions.-->
	
	<bean id="worker" class="com.m4f.utils.worker.impl.AppEngineBackendWorker"/>
	
	<!-- Creates worker factory -->
	<bean id="workerFactory" class="com.m4f.utils.worker.WorkerFactory">
		<constructor-arg index="0" ref="worker"/>
	</bean>
	
	
	
	<!-- Creates the CourseHtml Service -->
	<bean id="catalogService" class="com.m4f.business.service.impl.GaeJdoCatalogService">
		<constructor-arg index="0" ref="jdoDAO"/>
	</bean>
	
	<!-- A service to store multilanguage entities into JDO model. -->
    <bean id="i18nService" class="com.m4f.utils.i18n.service.impl.JdoI18nService">
    	<constructor-arg index="0" ref="jdoDAO"/>
    </bean>
    
    <!-- A service to store multilanguage entities into JDO model. -->
    <bean id="eventService" class="com.m4f.utils.feeds.events.service.impl.JdoEventServiceImpl">
    	<constructor-arg index="0" ref="jdoDAO"/>
    </bean>
    
    <!-- A service to store multilanguage entities into JDO model. -->
    <bean id="dumpService" class="com.m4f.utils.feeds.events.service.impl.JdoDumpServiceImpl">
    	<constructor-arg index="0" ref="jdoDAO"/>
    	<constructor-arg index="1" ref="eventService"/>
    </bean>
       
    <!-- A service to store multilanguage entities into JDO model. -->
    <bean id="parserService" class="com.m4f.utils.feeds.parser.service.impl.JDOParserServiceImpl">
    	<constructor-arg index="0" ref="jdoDAO"/>
    </bean>
    
    <!-- Configuration Service -->
	<bean id="configuration" class="com.m4f.business.service.impl.AppConfigurationServiceImpl">
		<constructor-arg index="0" ref="jdoDAO"/>
		<constructor-arg index="1" ref="defaultConfiguration"/>
	</bean>
	
	<!-- Gae HTTP Content Acquirer -->
	<bean id="acquirer" class="com.m4f.utils.content.impl.GaeHttpAcquirer"/>
	
    <!-- Schools parser -->
    <bean id="schoolParser" class="com.m4f.utils.feeds.parser.impl.SchoolsFeedParser" scope="prototype">
    	<constructor-arg index="0" ref="acquirer"/>
    </bean>
    
    <!-- Courses parser -->
    <bean id="courseParser" class="com.m4f.utils.feeds.parser.impl.CoursesFeedParser" scope="prototype">
    	<constructor-arg index="0">
    		<list>
      			<value>yyyy/MM/dd</value>
      			<value>yyyy-MM-dd</value>
  			</list>
    	</constructor-arg>
    </bean>
   
   <!-- Internal feeds service -->
    <bean id="internalFeedService" class="com.m4f.business.service.extended.impl.InternalFeedServiceImpl">
    	<constructor-arg index="0" ref="jdoDAO"/>
    	<constructor-arg index="1" ref="extendedSchoolService"/>
    	<constructor-arg index="2" ref="extendedCourseService"/>
    </bean>
	
	
	<!-- A service interceptor that intercepts other services with methods annotated. -->
    <bean id="multilanguageTranslator" class="com.m4f.utils.i18n.MultilanguageInterceptor">
    	<constructor-arg index="0" ref="i18nService"/>
    	<constructor-arg index="1" ref="beanManager"/>
    </bean>
    
    <!-- A service interceptor that intercepts other services with methods annotated with cacheable. -->
    <bean id="cacheInterceptor" class="com.m4f.utils.cache.CacheInterceptor"/>
    
    <!-- CronTaskReport Service -->
	<bean id="cronTaskReport" class="com.m4f.business.service.impl.CronTaskReportServiceImpl">
		<constructor-arg index="0" ref="jdoDAO"/>
	</bean>
	
	
	<bean id="differ" class="com.m4f.utils.diff.xml.impl.JDOMDiffer"/>
	<bean id="schoolStorage" class="com.m4f.utils.feeds.parser.impl.SchoolStore" scope="prototype"/>
	<bean id="courseStorage" class="com.m4f.utils.feeds.parser.impl.CourseStore" scope="prototype"/>
	
	
	<!-- Aspects -->
	<bean id="contentOptimizerAspect" class="com.m4f.utils.feeds.parser.aspect.FeedContentOptimizer"/>
	<bean id="parserHypervisor" class="com.m4f.utils.feeds.parser.aspect.ParserHypervisor"/>
	<bean id="storeHypervisor" class="com.m4f.utils.feeds.parser.aspect.StoreHypervisor"/>
	
    <aop:config>
    	
        <aop:aspect ref="multilanguageTranslator">           
            <aop:pointcut id="putMethods" expression="execution (* com.m4f.utils.i18n.dao.ifc.I18nDAOSupport.saveOrUpdate*(..)) and args(entity,locale)" />
         	<aop:after-returning pointcut-ref="putMethods" method="putMultilanguage" arg-names="entity,locale"/>
         	<aop:pointcut id="saveMethod" expression="execution (* com.m4f.utils.i18n.dao.ifc.I18nDAOSupport.saveOrUpdateCollection*(..)) and args(entities,locale)" />
         	<aop:after-returning pointcut-ref="saveMethod" method="collection" arg-names="entities,locale"/>
            <aop:pointcut id="loadSingleEntity" expression="execution(* com.m4f.utils.i18n.dao.ifc.I18nDAOSupport.findById(..)) and args(clazz,locale,..)"/>
         	<aop:after-returning pointcut-ref="loadSingleEntity" method="loadEntity" returning="retVal" arg-names="clazz,retVal,locale"/>    
            <aop:pointcut id="loadSingleEntity2" expression="execution(* com.m4f.utils.i18n.dao.ifc.I18nDAOSupport.findEntity(..)) and args(clazz,locale,..)"/>
         	<aop:after-returning pointcut-ref="loadSingleEntity2" method="loadEntity" returning="retVal" arg-names="clazz,retVal,locale"/>
            <aop:pointcut id="loadCollection" expression="execution(* com.m4f.utils.i18n.dao.ifc.I18nDAOSupport.findAll(..)) and args(clazz,locale,..)" />
            <aop:after-returning pointcut-ref="loadCollection" method="loadCollection" returning="retVal" arg-names="retVal,locale,clazz"/>
            <aop:pointcut id="loadCollection2" expression="execution(* com.m4f.utils.i18n.dao.ifc.I18nDAOSupport.findEntities*(..)) and args(entityClass,locale,..)" />
            <aop:after-returning pointcut-ref="loadCollection2" method="loadCollection" returning="retVal" arg-names="retVal,locale,entityClass"/>
            <aop:pointcut id="deleteMethods" expression="execution(* com.m4f.utils.i18n.dao.ifc.I18nDAOSupport.delete(..))" />
            <aop:around pointcut-ref="deleteMethods" method="deleteMultilanguage"/>
           	<aop:pointcut id="deleteCollection" expression="execution(* com.m4f.utils.i18n.dao.ifc.I18nDAOSupport.delete(java.util.Collection,java.util.Locale)) and args(objs,locale)" />
            <aop:after-returning pointcut-ref="deleteCollection" method="deleteCollection" arg-names="objs,locale"/>                   
        </aop:aspect>
        
        <aop:aspect ref="cacheInterceptor">
            <aop:pointcut id="cacheFlush" expression="@annotation(com.m4f.utils.cache.annotations.Cacheflush)" />
            <aop:around pointcut-ref="cacheFlush" method="cacheFlush"/>
         </aop:aspect>
         
    </aop:config>
	
</beans>